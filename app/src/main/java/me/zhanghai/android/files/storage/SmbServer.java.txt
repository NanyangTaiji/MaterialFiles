package me.zhanghai.android.files.storage;

import android.content.Context;
import android.content.Intent;
import android.os.Parcel;

import androidx.annotation.DrawableRes;
import androidx.annotation.NonNull;

import java.nio.file.Path;
import java.util.Random;

import me.zhanghai.android.files.R;
import me.zhanghai.android.files.provider.smb.client.Authority;
import me.zhanghai.android.files.util.IntentUtils;

public class SmbServer extends Storage {

    private final long id;
    private final String customName;
    private final Authority authority;
    private final String password;
    private final String relativePath;

    public SmbServer(long id, String customName, Authority authority, String password, String relativePath) {
        this.id = id;
        this.customName = customName;
        this.authority = authority;
        this.password = password;
        this.relativePath = relativePath;
    }

    public SmbServer(Long id, String customName, Authority authority, String password, String relativePath) {
        this(id != null ? id : new Random().nextLong(), customName, authority, password, relativePath);
    }

    @Override
    @DrawableRes
    public int getIconRes() {
        return R.drawable.computer_icon_white_24dp;
    }

    @Override
    public String getDefaultName(Context context) {
        return relativePath.isEmpty() ? authority.toString() : authority + "/" + relativePath;
    }

    @Override
    public String getDescription() {
        return authority.toString();
    }

    @Override
    public Path getPath() {
        return authority.createSmbRootPath().resolve(relativePath);
    }

    @Override
    public Intent createEditIntent() {
        return IntentUtils.createIntent(EditSmbServerActivity.class).putArgs(new EditSmbServerFragment.Args(this));
    }

    public long getId() {
        return id;
    }

    public String getCustomName() {
        return customName;
    }

    public Authority getAuthority() {
        return authority;
    }

    public String getPassword() {
        return password;
    }

    public String getRelativePath() {
        return relativePath;
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(@NonNull Parcel dest, int flags) {

    }
}

